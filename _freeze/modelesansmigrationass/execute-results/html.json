{
  "hash": "de0c72922b1d7bd93c8693cc6b2c1aaa",
  "result": {
    "markdown": "---\ntitle: Modèle logistique structuré avec migration symétrique\n---\n\n---\n\n*Modules à importer :*\n\n::: {.cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\"}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.integrate import odeint\n```\n:::\n\n\n## Définition du modèle\n\nOn pose le modèle suivant d'après @arditi2015 :\n$$\n\\left\\{\\begin{array}{l}\n\\dot x = r_xx\\left(1-\\frac{x}{K_x}\\right)+\\beta(y-x)\\\\\n\\dot y = r_yy\\left(1-\\frac{y}{K_y}\\right)+\\beta(x-y).\n\\end{array}\\right.\n$$ {#eq-modsmig}\n\navec :   \n- $x$ la population dans la culture,  \n- $y$ la population dans l'augmentorium,  \n- $r_x$ et $r_y$ le taux de croissance dans la culture et dans l'augmentorium,  \n- $K_x$ et $K_y$ les capacités biotiques de la culture et de l'augmentorium,  \n- $\\beta$ la force de migration entre les structures. \n\n### Hypothèses propre à l'augmentorium\n\nNous le savons, l'augmentorium fournit aux ravageurs une structure bénéfique à leur croissance. Ainsi, nous supposerons que $r_x < r_y$.  \n\nEn fonction de la culture qu'on va considérer on peut avoir $K_x>K_y$ et inversement.   \nEn effet, si la culture est remontante, ie qu'elle produit tout au long de l'année, les apports de fruits dans l'augmentorium ne seront jamais excessifs par rapport au nombre de fruits à l'extérieur, impliquant une capacité maximale plus forte pour la culture ($K_x>K_y$).  \nPar contre si la culture est non-remontante on aura énormément de fruits dans la culture sur une courte période et donc un fort taux de fruits mis dans l'augmentorium impliquant une possible capacité maximale plus forte pour l'augmentorium ($K_y>K_x$).\n\n## Dynamique du modèle\n\nOn va tracer la dynamique de la population en fonction du temps pour se faire une première idée de comment se comporte la population.\n\nOn définit le modèle sous [Python](https://www.python.org/) :\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndef aug(etat,t,param):\n    rx,ry,Kx,Ky,b=param\n    x,y=etat\n    s=[rx*x*(1-x/Kx)+b*(y-x),ry*y*(1-y/Ky)+b*(x-y)]\n    return s \n```\n:::\n\n\nOn va utiliser `odeint` de `Scipy` afin de simuler une solution en fonction du temps. \nIl faut donc définir un temps d'intégration, des conditions initiales et les paramètres du modèle : \n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n## Temps d'intégration:\nti = np.arange(0,10,0.01)\n\n## Etats initiaux:\nx0=2\ny0=0\ne0=[x0,y0]\n\n## Paramètres: \nrx=0.5\nry=1\nKx=2\nKy=1\nb=1\nparam_aug=np.array([rx,ry,Kx,Ky,b])\n\n## Simulation:\ns=odeint(aug,e0,ti,args=(param_aug,))\n```\n:::\n\n\nMaintenant qu'on a la simulation on peut plot la figure avec `matplotlib` :\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfig,ax=plt.subplots(1,1,figsize=(7,4))\nfig.suptitle('Dynamique des ravageurs dans le temps')\nax.plot(ti,s[:,0],color='C1',label='culture')\nax.plot(ti,s[:,1],color='C0',label='augmentorium')\n\nax.grid() #on ajoute la grille\nax.legend() #on ajoute la légende\nax.set_xlabel('Temps, t') \nax.set_ylabel('Densité de pop.')\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nText(0, 0.5, 'Densité de pop.')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](modelesansmigrationass_files/figure-html/cell-5-output-2.png){width=598 height=394}\n:::\n:::\n\n\nCette simulation nous montre une hausse de la population dans l'augmentorium et une baisse de la population dans la culture.  \nLes deux populations atteignent un équilibre qui semble stable (il se maintient dans le temps).  \n\nDans le cas d'un augmentorium on voit que le simple fait de débarasser les fruits et de les mettre dans un espace séparé de la culture ammène à une baisse de la population de ravageurs dans la culture.\n\n## Plan de phase\n\n### Equilibres et stabilités\n\nNous allons tracer le plan de phase associé à ce système pour voir les équilibres et leurs stabilités.\n\nA l'équilibre on a par définition $\\dot x = 0$ et $\\dot y =0$ ce qui donne : \n\n$$\n\\left\\{\\begin{array}{l}\n\\dot x = 0 \\Leftrightarrow  y^*=r_xx^*\\left(\\frac{1}{r_x}-\\frac{1}{\\beta}+\\frac{x^*}{\\beta K_x}\\right)\\\\\n\\dot y =0 \\Leftrightarrow  x^*=r_yy^*\\left(\\frac{1}{r_y}-\\frac{1}{\\beta}+\\frac{y^*}{\\beta K_y}\\right)\n\\end{array}\\right.\n$${#eq-pdpsmig}\n\navec, $x^*$ et $y^*$ la valeur des équilibres.\n\nAinsi, les deux isoclines correspondent à des paraboles. Celles-ci se croisent trivialement en $(0,0)$ et dans le quadrant positif en $(x^*,y^*)$. \n\nPour calculer $(x^*,y^*)$ on va utiliser l'expression des paraboles en ([-@eq-pdpsmig]), ce qui donne, après simplifications, un polynôme de degré 4 : \n\n$$ \ny\\left(r_xr_y\\left[\\frac{1}{\\beta}\\left(\\frac{1}{\\beta}-\\frac{1}{r_x}-\\frac{1}{r_y}\\right)+\\frac{1}{r_xr_y}\\right]-1\\right)+\\\\\\\\\n\\frac{y^2r_xr_y}{\\beta}\\left[\\frac{1}{K_y}\\left(\\frac{1}{r_x}-\\frac{1}{\\beta}\\right)+\\frac{1}{K_x}\\left(\\frac{1}{r_y}-\\frac{2}{\\beta}+\\frac{r_y}{\\beta^2}\\right)\\right]+\\\\\\\\\n\\frac{2y^3r_xr_y}{\\beta^2 K_xK_y}\\left(1-\\frac{r_y}{\\beta}\\right)+\n\\frac{y^4r_xr_y^2}{\\beta^3K_y^2K_x} = 0\n$${#eq-polsmig}\n\nCe polynôme est résoluble via `numpy` pour obtenir $y^*$:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n## On défnit un monome y, un polynôme p et on prend ses solutions:\ny=np.polynomial.Polynomial([0,1])\n\npol = y*(rx*ry*((1/b)*((1/b)-(1/rx)-(1/ry))+1/(rx*ry))-1)+(y**2)*((rx*ry)/b)*((1/Ky)*((1/rx)-(1/b))+(1/Kx)*((1/ry)-(2/b)+(ry/(b**2))))+2*(y**3)*((rx*ry)/((b**2)*Kx*Ky))*(1-(ry/b))+(y**4)*((rx*(ry**2))/((b**3)*(Ky**2)*Kx))\n\n## Solution qu'on obtient avec un masque booléen:\nsol = pol.roots()[(np.isreal(pol.roots()))*(pol.roots() > 0)]\nyeq=sol[0].real\n```\n:::\n\n\nOn déduit $x^*$ via sa définition par le [système](#eq-pdpsmig):\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nxeq=(ry*yeq*((1/ry)-(1/b)+(yeq/(b*Ky)))).real\n```\n:::\n\n\nAvec la valeur des équilibres on va maintenant tracer le plan de phase : \n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nfig,ax=plt.subplots(1,1)\nfig.suptitle('Plan de phase du système')\n\n## Isocline nulles:\nxt=np.arange(-10,10,0.01)\n## Pour xdot = 0:\nax.plot(xt,xt*(1/b)*(rx*((xt/Kx)-1)+b),color='C2',label='$\\dot x=0$')\nax.plot(np.zeros_like(xt),xt,color='0.8',markersize=6)\n\n## Pour ydot = 0:\nax.plot(xt*(1/b)*(ry*((xt/Ky)-1)+b),xt,color='C3',label='$\\dot y=0$')\nax.plot(xt,np.zeros_like(xt),color='0.8',markersize=6)\n\n## On réduit la vue à ce qui nous intéresse:\nax.set_xlim(left=-1,right=3)\nax.set_ylim(top=3,bottom=-1)\n\n## On trace la droite la somme des capacités:\nx=np.arange(0,10,0.01)\nax.plot(x,-x+Kx+Ky,label='$K_x+K_y$',color='0.8')\n\n## On nomme les axes:\nax.set_xlabel('$x$',fontsize='12')\nax.set_ylabel('$y$',fontsize='12')\n\n## On plot les deux équilibres:\nax.plot(xeq.real,yeq.real,label='$(x^*,y^*)$',marker='.',markersize=6,color='k')\nax.plot(0,0,label='$(0,0)$',marker='.',markersize=6,color='k')\n\n## Localisation de la légende:\nax.legend(loc='upper left')\n\n## Ajout du champ de vecteur via la fonction quiver :\nxg=np.arange(0,5,0.6)\nyg=np.arange(0,5,0.6)\nX,Y=np.meshgrid(xg,yg)\n\ndx,dy=aug([X,Y],0,param_aug)\nax.quiver(X,Y,dx,dy,angles='xy',color='grey',scale=80,width=0.003)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n<matplotlib.quiver.Quiver at 0x7f19775aecb0>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](modelesansmigrationass_files/figure-html/cell-8-output-2.png){width=613 height=480}\n:::\n:::\n\n\nComme dit plus haut on a bien un croisement dans le quadrant positif qui correspond à l'équilibre $(x^*,y^*)$. \n\nLes paraboles, en fonction des valeurs de leurs racines, peuvent croiser de différentes manières les axes des abssices et des ordonnées.  \nLe plan de phase peut donc présenter plusieurs profils, autre que \ncelui tracé ici. Néanmoins, le croisement des paraboles dans le quadrant positif (l'équilibre non nul) est toujours présent quelque soit le profil.\n\nEn faisant apparaître le champ de vecteur on peut déduire que l'équilibre en $(0,0)$ est instable et l'équilibre en $(x^*,y^*)$ est stable.\n\n#### Stabilité mathématique des équilibres\n\nIl est clair que $(0,0)$ est instable et $(x^*,y^*)$ est stable (par le champ de vecteur).  \nMathématiquement considérons la jacobienne de ([-@eq-modsmig]): \n$$ \n\\mathbb{J}=\\left[\\begin{array}{cc} \n\\ r_x-\\frac{2r_xx}{K_x}-\\beta & \\beta \\\\\n\\ \\beta & r_y -\\frac{2r_yy}{K_y}-\\beta\n\\end{array}\\right]\n$${#eq-jacob}\n\net donc pour $(0,0)$:  \n\n$$\n\\mathbb{J_{\\vec{0}}}=\\left[\\begin{array}{cc}\\\\\n\\ r_x-\\beta & \\beta \\\\\n\\ \\beta & r_y -\\beta\n\\end{array}\\right]\n$$\n$$\n\\Leftrightarrow\n$$\n$$\n\\sigma_\\mathbb{J} = (\\lambda_1 = \\frac{r_x+r_y-2\\beta-2\\beta\\sqrt{\\frac{(r_x-r_y)^2}{4\\beta^2}+1}}{2},\\lambda_2=\\frac{r_x+r_y-2\\beta+2\\beta\\sqrt{\\frac{(r_x-r_y)^2}{4\\beta^2}+1}}{2})\n$$\n\net on a ainsi,\n\n$$\n\\lambda_2 > 0\n$$\n\nDonc $(0,0)$ est bien instable, $\\forall (x_0,y_0) \\in \\mathbb{R^2_+}$.  \nPour $(x^*,y^*)$ après simplification (et en abandonnant les * par comodité) : \n\n$$ \\mathbb{J_{x^*,y^*}} = \\left[\\begin{array}{cc} \\\\\n\\ -\\frac{\\beta y}{x}-\\frac{r_xx}{K_x} & \\beta \\\\\n\\ \\beta & -\\frac{\\beta x}{y}-\\frac{r_yy}{K_y}\n\\end{array}\\right]\n$$\n\nIl est alors facile de vérifier que la trace de cette matrice est négative pour tout $(x_0,y_0)$ et que le déterminant est positif pour tout $(x_0,y_0)$.\nAinsi, $(x^*,y^*)$ est bien stable, $\\forall (x_0,y_0) \\in \\mathbb{R^2_+}$.\n\n### Analyse du plan de phase\n\nOn remarque que l'équilibre atteint n'est pas sur la droite $x^*+y^*=K_x+K_y$ , ceci implique que la structuration de l'espace perturbe les équilibres qui auraient dû être la somme des équilires des deux régions (la logistique tend vers la capacité maximale à l'équilibre).     \nSi la somme des équilibres est plus grande que $K_x+K_y$ on dit que le système subit une inflation (voir [contexte](contexte.qmd)).\n\nPlus généralement, on peut montrer qu'en cas de mixité parfaite entre les deux patchs ($\\beta \\to \\infty$) on a :\n\n$$\nx^*+y^* = K_x + K_y + (K_x-K_y)\\frac{r_xK_y-r_yK_x}{r_xK_y+r_yK_x}\n$${#eq-inf}\n\nCe qui montre qu'en général on a pas $x^*+y^* = K_x + K_x$. De plus par ([-@eq-inf]), si $K_y<K_x$ (culture remontante) et si $r_xK_y<r_yK_x$ alors $x^*+y^* < K_x+K_y$ ce qui nous intéresse particulièrement pour la lutte biologique (et inversement pour les cultures non remontantes).  \n\nDe plus, en faisant $\\dot x + \\dot y = 0$ dans le cas de l'équilibre on a (en abandonnant les étoiles par commodité):\n$$ \nr_xx\\left(1-\\frac{x}{K_x}\\right)+r_yy\\left(1-\\frac{y}{K_y}\\right) = 0 \n$${#eq-ell}\n\nAutrement dit les points d'équilibres vivent sur une ellipse (si on ne modifie que $\\beta$ ), qu'on va tracer avec `contour` :\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nxg2=np.arange(-5,5,0.01)\nyg2=np.arange(-5,5,0.01)\nX2,Y2=np.meshgrid(xg2,yg2)\n\nX=rx*X2*(1-X2/Kx)\nY=ry*Y2*(1-Y2/Ky)\nax.contour(X2,Y2,(X+Y),[0],colors='C1')\nax.plot(0,0,color='C1',label='Ellipse des solutions')\n\n## Localisation de la légende:\nax.legend(loc='lower left',fontsize = 8)\n\n## On place les différents points d'intérêts...\nxv=np.arange(0,10)\nax.plot(0,Ky,marker='.',markersize=7,color='k')\nax.plot(Kx,0,marker='.',markersize=7,color='k')\nax.plot(Kx,Ky,marker='.',markersize=6,color='k')\n\n##...et on les relie aux axes:\nxc=np.arange(0,Kx,0.01)\nax.plot(xc,Ky*np.ones_like(xc),linestyle='dashed',color='k',linewidth=0.5)\nyc=np.arange(0,Ky,0.01)\nax.plot(Kx*np.ones_like(yc),yc,linestyle='dashed',color='k',linewidth=0.5)\n\n#On nomme les points:\nax.text(-0.2,Ky,'$K_y$')\nax.text(Kx,-0.2,'$K_x$')\n\n#On place les points d'équilibres :\nys=np.arange(0,yeq,0.01)\nxs=np.arange(0,xeq,0.01)\nax.plot(xeq*np.ones_like(ys),ys,linestyle='dashed',color='k',linewidth=0.5)\nax.plot(xs,yeq*np.ones_like(xs),linestyle='dashed',color='k',linewidth=0.5)\nax.text(-0.2,yeq,'$y^*$')\nax.text(xeq,-0.2,'$x^*$')\n\ndisplay(fig)\n```\n\n::: {.cell-output .cell-output-display}\n![](modelesansmigrationass_files/figure-html/cell-9-output-1.png){width=613 height=480}\n:::\n:::\n\n\n#### a) Première condition à un système déflationiste \nOn remarque que le point $(K_x,K_y)$ est en permanence sur la droite $K_x+K_y$ qui coupe en permanence l'ellipse sauf pour une situation où la droite $K_x+K_y$ est tangente à l'ellipse.  \nCe cas nous intéresse car il rend compte d'un système entièrement déflationiste.  \n\n\nL'ellipse, d'équation $f(x,y)=r_xx\\left(1-\\frac{x}{K_x}\\right)+r_yy\\left(1-\\frac{y}{K_y}\\right) = 0$  , peut être vue comme la ligne de niveau de $f$ en $0$. \n\nAinsi, une équation de la tangente au point $(x_0,y_0)$ serait donnée par:   \n$$\n\\frac{\\partial f}{\\partial x}(x_0,y_0)(x-x_0)+ \\frac{\\partial f}{\\partial y}(x_0,y_0)(y-y_0) = 0\n$${#eq-eqa}\n\nDans le cas où $(x_0=K_x , y_0=K_y)$ on a alors $y=-\\frac{r_x}{r_y}\\left(x-K_x\\right) + K_y$ équation de la tangente au point $(K_x,K_y)$.\n\nPour que le système soit déflationiste on veut que cette équation ait une pente de $-1$ afin d'avoir l'équation de la droite $K_x+K_y$ et garantir la déflation. Ainsi on veut que $r_x=r_y$. \n\nDonc : si $r_x=r_y$ on a ([-@eq-modsmig]) qui est déflationiste quelque soit le taux de migration.\n\n#### b) Deuxième condition à un système déflationiste\n\nOn se place avec la condition $r_x<r_y$.  \n\nSi on trace la parabole définie par $\\dot x = 0$ quand $\\beta \\to \\infty$ alors on peut prédire quand le système est déflationiste. \nEn effet, il faut alors que la pente de la parabole en l'infini soit plus grande que la pente de la parabole en $\\beta = 0$.  \nPar définition de ([-@eq-pdpsmig]) on a quand $\\beta \\to \\infty$, $y^* = x^*$.  \nLa pente quand $\\beta = 0$ est $\\frac{K_y}{K_x}$. \n\nSi on a $r_x < r_y$ et $K_x>K_y$ on aura tout le temps un modèle déflationiste pour les ravageurs.\n\nCeci est intéressant pour l'augmentorium, si on a la capacité de l'augmentorium qui est plus faible que celle de la culture alors le système est toujours négatif pour la population totale de ravageurs. \n\nOn peut aussi voir graphiquement que dans ce cas là on a toujours $x^* < K_x$, c'est ce que l'on cherche à obtenir.\n\n## Animation \n\nPour mieux comprendre comment se déplace le système en fonction des paramètres :\n\n::: {.cell execution_count=9}\n``` {.python .cell-code code-fold=\"true\"}\n#Technique pour utiliser une fenêtre geogebra:\nimport IPython.display as display\nfig01 = \"\"\"\n<iframe width=\"700\" height=\"550\" src=\"https://www.geogebra.org/classic/ajaycvqe\" style=\"border: 1px solid black\"></iframe>\n\"\"\"\ndisplay.HTML(fig01)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n\n<iframe width=\"700\" height=\"550\" src=\"https://www.geogebra.org/classic/ajaycvqe\" style=\"border: 1px solid black\"></iframe>\n```\n:::\n:::\n\n\n &nbsp;     \n\n[Passons](modeleavecmigrationass.qmd) mainenant à un modèle qui prend en compte que les migrations peuvent êtres assymétriques.\n\n---\n\n*Cette analyse s'appuie sur celle effectuée par [R.Arditi et al.](https://doi.org/10.1016/j.tpb.2015.10.001) en 2015 et a été retravaillée pour coller au modèle de l'augmentorium.*\n\n",
    "supporting": [
      "modelesansmigrationass_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}